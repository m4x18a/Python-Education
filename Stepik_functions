# Напишите функцию draw_triangle(fill, base), которая принимает два параметра: fill – символ заполнитель; base – величина основания равнобедренного треугольника; а затем выводит его.

def draw_triangle(fill, base):
    for i in range((base + 1) // 2):
        print(fill * (i + 1))
    for j in range(base // 2, 0, -1):
        print(fill * j)


fill = input()
base = int(input())
draw_triangle(fill, base)

# Напишите функцию print_fio(name, surname, patronymic), которая принимает три параметра: name – имя человека; surname – фамилия человека; patronymic – отчество человека; а затем выводит на печать ФИО человека.

def print_fio(name, surname, patronymic):
    print(surname[0].upper(), name[0].upper(), patronymic[0].upper(), sep='')


name, surname, patronymic = input(), input(), input()
print_fio(name, surname, patronymic)

# Напишите функцию print_digit_sum(), которая принимает одно целое число num и выводит на печать сумму его цифр.

def print_digit_sum(num):
    sum = 0
    while num != 0:
        sum += num % 10
        num //= 10
    print(sum)


n = int(input())
print_digit_sum(n)

# Напишите функцию с именем find_all(target, symbol), которая принимает два аргумента: строку target и символ symbol и возвращает список, содержащий все местоположения этого символа в строке.

def find_all(target, symbol):
    list_index = []
    a = 0
    for i in range(len(target)):
        if target[i] == symbol:
            list_index.append(i)
    return list_index
        

s = input()
char = input()
print(find_all(s, char))

# Напишите функцию is_prime(num), которая принимает в качестве аргумента натуральное число и возвращает значение True если число является простым и False в противном случае.

def is_prime(num): # объявление функции
    count = 0
    for i in range (1, num + 1):
        if num % i == 0:
            count += 1
    if count == 2:
        return True
    else:
        return False


n = int(input()) # считываем данные
print(is_prime(n)) # вызываем функцию

# Напишите функцию get_next_prime(num), которая принимает в качестве аргумента натуральное число num и возвращает первое простое число большее числа num.


def get_next_prime(num): # объявление функции
    for i in range(num + 1, num * 2 + 1):
        count = 0
        for k in range(1, i + 1):
            if i % k == 0:
                count += 1
        if count == 2:
            return i


n = int(input()) # считываем данные
print(get_next_prime(n)) # вызываем функцию

# Напишите функцию is_one_away(word1, word2), которая принимает в качестве аргументов два слова word1 и word2 и возвращает значение True если слова имеют одинаковую длину и отличаются ровно в 1 символе и False в противном случае.

def is_one_away(a, b):
    count = 0
    if len(a) != len(b):
        return False
    if a == b:
        return False
    for i in range(len(a)):
        if a[i] != b[i]:
            count += 1
        if count > 1:
            return False
    return True

txt1 = input()
txt2 = input()
print(is_one_away(txt1, txt2))




































































































